#PARSER#

**R name1 simple

  x <- c(1:10)
  print(x)
**/

# This is a comment yup


**python module2 simple

x = 3
print(x)
**/


**R moduu simple
  x <- c(1:10)
  y <- x^2
  print(y)
  print(x)
**/


**R rtester simple
  args <- commandArgs(trailingOnly = TRUE)
  
  qwe <- function(asd){
    return(as.integer(asd)^2)
  }
  qwe(args[1]) 
**/


**lua luaTest simple
function fact (n)
    if n == 0 then
      return 1
    else
      return n * fact(n-1)
    end
  end
  
--print("enter a number:")
  --a = io.read("*number")
  print(fact(arg[1]))
--If you are using Lua 

**/


**go goMod simple
package main
import "os"
import "fmt"
func main() {
  arg := os.Args[1]
  fmt.Println(arg)
}
**/


**Elixir textElixir simple
  IO.puts "Hello world from Elixir"
**/


**bat testBat simple
echo hi
echo hi again

**/


**rust testRust simple
fn main() {
    // The statements here will be executed when the compiled binary is called

    // Print text to the console
    println!("Hello World! from rust");
}
**/


**ruby testRuby simple
puts "Hello World From Ruby!"
puts ARGV[0]*3

**/


**perl testPerl simple
print "Hello, world!\n";
print qq=Did you say "Hello?"\n=;
print "$ARGV[0]\n";
**/


**dart testDart simple
void main() {
  print('Hello, World! from dart');
}
**/


**java Helloworld simple
public class Helloworld {

    public static void main(String[] args) {
        // Prints "Hello, World" to the terminal window.
        System.out.println("Hello, World from java");
    }

}
**/


**js funJS simple
var x = 2;
console.log(x);
**/

# Testing function calls here

** funJS
** Helloworld
** testDart
** testPerl 3
** name1 
** module2
** rtester 4


** luaTest 7
** goMod 4
** testElixir
** testBat
** testRust
** testRuby 4

# Testing pipe calls here
rtester **<< module2
testRuby **<< module2
goMod **<< module2
luaTest **<< module2
